Chaat API Phase 1 rough draft:

- Only supports direct messages, no group chats

------------------------
Functionality:

- Create user account
add record to user table

- Login/generate authentication token
provide username and password, authenticate and return token

- Get list of all registered users
get from user table

- Get list of all your friend requests (pending/accepted/rejected/withdrawn)
get from friend_request table

- Send friend request
add record to friend_request table

- Withdraw friend request
update status field of existing record in friend_request_table

- Respond to friend request (accept/reject)
update status field of existing record in friend_request table
add record to friend table

- Get list of all your fiends
get from friend table

- Delete a friend
delete record from friend table

- Get list of all existing direct chat sessions
get from direct_chat_session table

- Create a direct chat
add record to direct_chat_session table

- Get list of users in a direct_chat_session
get from direct_chat_session table

- Send message to a username
add record to direct_message table

- Get x number of messages from direct_chat_session
get x number of most recent messages matching direct_chat_session id from direct_message table

- Get all messages since timestamp in a direct chat_session
get from direct_message table

- Get all unread messages from a direct chat session (Phase 2)


------------------------
Sample scenarios:


----------
Phase 2 functionality: 

- Get list of chat sessions which have a particular userid as a participant
get from chat_participant table

- Get list of participants for a particular chat session
get from chat_participant table

- Create a group chat with x people
Add record to chat_sesh
Add x records to chat_participant

------------------------
Restrictions/Rules:

- usernames are unique

- groupnames are unique (like slack channels)

- groupname can be  == username

- to send a message in a groupchat, it is not necessary to be friends with group participants

------------------------

To figure out:

- User wants to send a message to a username/groupname. How do we internally map the username/groupname to a chat_sesh_id? 

Difficult because:
usernames are unique but groupnames are not
1-1 chats and group chats are stored in the same table, and user_ids can be common.                    

If we have different tables for 1-1 chats and group chats, searching for 1-1 chat session ids becomes easy:
username -> userid -> chat_sesh_id

For groupchats, should we then enforce unique names?
For example, Slack only allows unique channel names. 

Let's do unique groupnames.

------------------------
Sample scenario:

- shivam wants to send a 1-1 message to shahn for the first time.

Check if shivam and shahn are friends
* Check if 1-1 chat session between shahn/shivam exists. 
(1-1 chat sesh table)
If does not exit, create a new chat session.
If it does exist, use existing chat session.
Send a message with that chat_sesh_id.

- Shivam wants to send a message in a group chat:

prereq: Shivam knows the group chat name

get chat_sesh_id from group_chat_sesh table
send a message with that chat_sesh_id

- Shiv


Get the participants from group_chat_participants


Shivam pulls list of existing group chat sessions.
Chooses 

/groupchat/message
Shivam needs group chat name (or chat_sesh_id?)

- Shivam wants to create a group
Participant list: 00, 01, 02
00 -> 01
01 -> 02
00 -> 02

------------------------
Random Notes:

- No session state in cli version. We authenticate, and then manually send token during each api request.

- When using apps like slack or whatsapp, a lot of things are naturally (without second thought) done by the user through GUI's, for example, selecting a chat session to send a message to from a list of chat sessions. 

- Send message to a chat_sesh_id or username or groupname?
User will figure out chat_sesh_id, same way as in a gui?
Too clunky, will try to let user send message to username, without chat_sesh_id

Have a different api for group chats?

This will also affect the flow when initiating a 1-1 conversation for the first time. There needs to be an existing chat session before a message can be sent. Will try to make the process smoother.

- redundancy?

combine chat_participant and chat_sesh tables into one table?

- Notification system (Phase 2)
2 options:
Triggered in db when record is added
OR triggered in app logic <-- standard/more control
(transaction commits, post transaction commit, post commit callback)

